generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  User
  Owner
  Admin
}

enum Gender {
  Male
  Female
  Undefined
}

enum NotificationType {
  medication
  appointment
  measurement
  hydration
  other
}

enum RecurrencePattern {
  daily
  weekdays
  weekly
  monthly
}

model User {
  id              Int             @id @default(autoincrement())
  email           String          @unique
  phone           String          @unique
  first_name      String
  last_name       String
  patronymic      String
  password        String
  diseases        String[]
  med_doc         String
  role            Role            @default(User)
  weekly_water    Json?           @default("{}")
  weekly_sleep    Json?           @default("{}")
  gender          Gender?         @default(Undefined)
  age             Int?
  height          Decimal?
  weight          Decimal?

  clinic          Clinic?         @relation("MyClinic")
  notifications   Notification[]
  skinChecks      SkinCheck[]
  anxietyChecks   AnxietyCheck[]  @relation("UserAnxietyChecks")
  appointments    Appointment[]   @relation("UserAppointments")
}

model SkinCheck {
  id                   Int      @id @default(autoincrement())
  user_id              Int
  check_id             Int
  check_datetime       DateTime
  class                String
  class_raw            String
  desease              String
  description          String
  risk                 String
  risk_level           String
  risk_description     String
  risk_title           String
  short_recommendation String
  image_url            String
  masked_s3_url        String
  colored_s3_url       String
  prob                 String
  uid                  String   @unique
  atlas_page_link      String

  user                 User     @relation(fields: [user_id], references: [id])
}

model Clinic {
  id            String     @id @default(uuid())
  name          String
  owner_id      Int        @unique
  services      Service[]
  doctors       Doctor[]
  address       String
  city          String

  owner         User       @relation("MyClinic", fields: [owner_id], references: [id])
}

model Service {
  id          Int         @id @default(autoincrement())
  clinic_id   String
  name        String
  description String
  price       Int

  clinic      Clinic      @relation(fields: [clinic_id], references: [id])
  doctors     Doctor[]    @relation("DoctorServices")
}

model Doctor {
  id                Int       @id @default(autoincrement())
  name              String
  specialty         String
  photo             String
  rating            Float
  review_count      Int
  experience        String
  education         String[]
  languages         String[]
  clinic_id         String
  schedule          Json
  price             String
  accepts_insurance String[]
  about             String

  clinic            Clinic     @relation(fields: [clinic_id], references: [id])
  services          Service[]  @relation("DoctorServices")
  appointments      Appointment[] @relation("DoctorAppointments")
}


model Notification {
  id                 Int               @id @default(autoincrement())
  user_id            Int
  end_date           String
  time               String
  type               NotificationType
  title              String
  description        String?
  is_recurring       Boolean?           @default(false)
  recurrence_pattern RecurrencePattern?

  user               User               @relation(fields: [user_id], references: [id])
}

model AnxietyCheck {
  id                   Int      @id @default(autoincrement())
  user_id              Int
  answers              String[]
  anxiety_level        Int
  stress_level         Int
  emotional_stability  Int
  energy_level         Int
  summary              String
  created_at           DateTime @default(now())

  user                 User     @relation("UserAnxietyChecks", fields: [user_id], references: [id])

  @@index([user_id])
}

model Appointment {
  id          Int      @id @default(autoincrement())
  doctor_id   Int
  user_id     Int
  date        DateTime
  description String?

  doctor      Doctor   @relation("DoctorAppointments", fields: [doctor_id], references: [id])
  user        User     @relation("UserAppointments", fields: [user_id], references: [id])

  @@index([doctor_id])
  @@index([user_id])
}
