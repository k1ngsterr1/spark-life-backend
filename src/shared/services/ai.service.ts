import { HttpException, Injectable } from '@nestjs/common';
import { PrismaService } from './prisma.service';
import OpenAI from 'openai';
import { User } from '@prisma/client';
import { AskAiAssistanceDto } from 'src/user/dto/ask-ai-assistance.dto';
import { v4 as uuidv4 } from 'uuid';
import * as fs from 'fs';
import * as path from 'path';
import * as textToSpeech from '@google-cloud/text-to-speech';

@Injectable()
export class AIService {
  private client: OpenAI;

  constructor(private readonly prisma: PrismaService) {
    this.client = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    });
  }

  async getHealthAdvice(user: User): Promise<{
    daily_sleep: string;
    daily_water: string;
    recommendation: string;
  }> {
    try {
      const response = await this.client.chat.completions.create({
        model: 'gpt-4-turbo',
        messages: [
          {
            role: 'system',
            content: `
You are a professional doctor therapist with 30+ years of experience.
Analyze user's diseases, body parameters, and gender to create personal advice.
Answer strictly in JSON format like this:

{
  "daily_sleep": "8 hours",
  "daily_water": "2 liters",
  "recommendation": "You should increase your sleep duration to boost your immune system."
}
          `,
          },
          {
            role: 'user',
            content: `
Diseases: ${user.diseases?.join(', ') || 'None'}
Gender: ${user.gender}
Height: ${user.height} cm
Weight: ${user.weight} kg
Age: ${user.age}
          `,
          },
        ],
        temperature: 0.3,
      });

      const text = response.choices[0]?.message?.content;

      if (!text) {
        throw new Error('Empty AI response');
      }

      const advice = JSON.parse(text);

      return advice;
    } catch (error) {
      console.error('AIService getHealthAdvice error:', error);
      throw new HttpException('Failed to get health advice', 500);
    }
  }

  async processMedicalDocumentFromUrl(userId: number, imageUrl: string) {
    console.log('üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å image_url:', imageUrl);

    const prompt = `
–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ò–ò. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏–ª –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç.

–ò–∑–≤–ª–µ–∫–∏ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:
- —Å–ø–∏—Å–æ–∫ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π (–º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫)
- —Ä–æ—Å—Ç –≤ —Å–º
- –≤–µ—Å –≤ –∫–≥
- –≤–æ–∑—Ä–∞—Å—Ç

–û—Ç–≤–µ—Ç –≤ JSON:
{
  "diseases": ["..."],
  "height": 170,
  "weight": 70,
  "age": 40
}

–ï—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ—Ç ‚Äî —Å—Ç–∞–≤—å null. –¢–æ–ª—å–∫–æ JSON, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π!
`.trim();

    const response = await this.client.chat.completions.create({
      model: 'gpt-4-turbo',
      messages: [
        {
          role: 'user',
          content: [
            { type: 'text', text: prompt },
            {
              type: 'image_url',
              image_url: { url: imageUrl },
            },
          ],
        },
      ],
      max_tokens: 1000,
      temperature: 0.2,
    });

    const content = response.choices[0]?.message?.content;

    if (!content) throw new HttpException('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç AI', 500);

    let extracted;
    try {
      extracted = JSON.parse(content);
      console.log('‚úÖ AI JSON:', extracted);
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', content);
      throw new HttpException('AI –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON', 500);
    }

    const updatedUser = await this.prisma.user.update({
      where: { id: userId },
      data: {
        diseases: extracted.diseases || [],
        height: extracted.height ?? undefined,
        weight: extracted.weight ?? undefined,
        age: extracted.age ?? undefined,
      },
    });

    console.log('üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω:', updatedUser.id);
    return updatedUser;
  }

  async askAiAssistance(data: AskAiAssistanceDto): Promise<{
    id: string;
    text: string;
    audioPath: string; // –ø—É—Ç—å –¥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
    sender: 'ai';
    timestamp: Date;
  }> {
    try {
      const user = data.user;

      const userInfo = `
User information:
- First Name: ${user.firstName || user.first_name || 'Unknown'}
- Last Name: ${user.lastName || user.last_name || 'Unknown'}
- Phone: ${user.phone || 'Unknown'}
- Email: ${user.email || 'Unknown'}
      `.trim();

      const response = await this.client.chat.completions.create({
        model: 'gpt-4-turbo',
        messages: [
          {
            role: 'system',
            content: `
You are an experienced AI assistant therapist with 30+ years of practice.
You provide advice based on the user's personal medical background and contact details.
Always consider user's name, age, gender, diseases and body parameters if available.
Be empathetic, professional, clear, and focused on practical advice. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º! –ò –æ—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –Ω–µ —Å—É–ø–µ—Ä –º–Ω–æ–≥–æ —Å–ª–æ–≤! –ù–µ –≥–æ–≤–æ—Ä–∏ –≤—Å–µ–≥–¥–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –æ–¥–∏–Ω —Ä–∞–∑ —Å–∫–∞–∑–∞–ª –∏ —Ö–≤–∞—Ç–∏—Çs.
            `.trim(),
          },
          {
            role: 'user',
            content: `
${userInfo}

User question:
"${data.query}"
            `.trim(),
          },
        ],
        temperature: 0.2,
      });

      const aiText = response.choices[0]?.message?.content || 'No response';
      console.log('[askAiAssistance] –û—Ç–≤–µ—Ç –æ—Ç GPT:');
      console.log(aiText);

      // üîä Step 2: Call Google TTS API
      const ttsResponse = await this.synthesizeSpeech(aiText);

      const audioId = uuidv4();
      const audioPath = path.join(
        process.cwd(), // <--- –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞, –∞ –Ω–µ dist
        'uploads',
        `${audioId}.wav`,
      );

      fs.writeFileSync(audioPath, Buffer.from(ttsResponse, 'base64'));
      console.log('[askAiAssistance] –ê—É–¥–∏–æ—Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω:', audioPath);

      return {
        id: uuidv4(),
        text: aiText,
        audioPath: `https://spark-life-backend-production-d81a.up.railway.app/uploads/${audioId}.wav`,
        sender: 'ai',
        timestamp: new Date(),
      };
    } catch (error) {
      console.error('AIService askAiAssistance error:', error);
      throw new HttpException('Failed to get AI assistance', 500);
    }
  }

  private async synthesizeSpeech(text: string): Promise<string> {
    const client = new textToSpeech.TextToSpeechClient({
      keyFilename: path.join(process.cwd(), 'keys/tts-key.json'),
    });

    const request: textToSpeech.protos.google.cloud.texttospeech.v1.ISynthesizeSpeechRequest =
      {
        input: { text },
        voice: {
          languageCode: 'ru-RU',
          name: 'ru-RU-Chirp3-HD-Charon',
        },
        audioConfig: {
          audioEncoding: 'LINEAR16',
        },
      };

    const [response] = await client.synthesizeSpeech(request);

    if (!response.audioContent) {
      throw new Error('No audio content returned from TTS');
    }

    return Buffer.from(response.audioContent as Buffer).toString('base64');
  }

  async aiStats(
    user: User,
    userLanguage: 'ru' | 'en' = 'en',
  ): Promise<{
    daily_sleep: string;
    daily_water: string;
    recommendation: string;
  }> {
    try {
      const diseasesList = user.diseases?.length
        ? user.diseases.join(', ')
        : userLanguage === 'ru'
          ? '–ù–µ—Ç –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π'
          : 'No diseases';

      const systemPrompt =
        userLanguage === 'ru'
          ? `
–¢—ã –æ–ø—ã—Ç–Ω—ã–π –≤—Ä–∞—á. –ù–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ–≥–æ –ø–æ–ª–∞, –≤–æ–∑—Ä–∞—Å—Ç–∞, —Ä–æ—Å—Ç–∞ –∏ –≤–µ—Å–∞, –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
- —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Å–Ω–∞ –Ω—É–∂–Ω–æ –≤ –¥–µ–Ω—å ("daily_sleep")
- —Å–∫–æ–ª—å–∫–æ –ª–∏—Ç—Ä–æ–≤ –≤–æ–¥—ã –Ω—É–∂–Ω–æ –ø–∏—Ç—å –≤ –¥–µ–Ω—å ("daily_water")
- –∫—Ä–∞—Ç–∫–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ ("recommendation")

–û—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:

{
  "daily_sleep": "7-8",
  "daily_water": "2.5",
  "recommendation": "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∏–≤–∞–µ–º–æ–π –≤–æ–¥—ã –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ–Ω –∏–∑-–∑–∞ –Ω–∞–ª–∏—á–∏—è –≥–∏–ø–µ—Ä—Ç–æ–Ω–∏–∏ –∏ –¥–∏–∞–±–µ—Ç–∞."
}
        `.trim()
          : `
You are an experienced medical AI assistant. Based on the user's diseases, gender, age, height, and weight, provide health recommendations:
- How many hours of sleep are needed per day ("daily_sleep")
- How many liters of water are needed per day ("daily_water")
- A short explanation ("recommendation")

Answer strictly in JSON format:

{
  "daily_sleep": "7-8",
  "daily_water": "2.5",
  "recommendation": "It is recommended to increase water intake and improve sleep hygiene due to hypertension and diabetes."
}
        `.trim();

      const userPrompt = `
Diseases: ${diseasesList}
Gender: ${user.gender}
Age: ${user.age ?? (userLanguage === 'ru' ? '–ù–µ —É–∫–∞–∑–∞–Ω' : 'Unknown')}
Height: ${user.height ?? (userLanguage === 'ru' ? '–ù–µ —É–∫–∞–∑–∞–Ω' : 'Unknown')} cm
Weight: ${user.weight ?? (userLanguage === 'ru' ? '–ù–µ —É–∫–∞–∑–∞–Ω' : 'Unknown')} kg
    `.trim();

      const response = await this.client.chat.completions.create({
        model: 'gpt-4-turbo',
        messages: [
          {
            role: 'system',
            content: systemPrompt,
          },
          {
            role: 'user',
            content: userPrompt,
          },
        ],
        temperature: 0.2,
      });

      const content = response.choices[0]?.message?.content;

      if (!content) {
        throw new Error('Empty AI response');
      }

      const stats = JSON.parse(content);

      return stats;
    } catch (error) {
      console.error('AIService aiStats error:', error);
      throw new HttpException('Failed to get AI stats', 500);
    }
  }
  async getRecommendationServices(userId: number, lang: 'ru' | 'en') {
    try {
      const user = await this.prisma.user.findUnique({ where: { id: userId } });
      const skinCheck = await this.prisma.skinCheck.findFirst({
        where: { user_id: user.id },
        orderBy: { check_datetime: 'desc' },
      });

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å AnxietyCheck
      const anxietyCheck = await this.prisma.anxietyCheck.findFirst({
        where: { user_id: user.id },
        orderBy: { created_at: 'desc' },
      });

      const services = await this.prisma.service.findMany();
      const services_full = await this.prisma.service.findMany({
        include: { clinic: true, doctors: true },
      });

      const userDiseases = user.diseases.join(', ') || 'None';

      const servicesJson = JSON.stringify(services, null, 2);
      const skinJson = JSON.stringify(skinCheck, null, 2);
      const anxietyJson = JSON.stringify(anxietyCheck, null, 2);

      const prompt =
        lang === 'ru'
          ? `–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è: ${userDiseases}.
      –í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥ (–≤—ã–±–∏—Ä–∞–π —Ç–æ–ª—å–∫–æ –∏–∑ –Ω–∏—Ö, –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π –Ω–æ–≤—ã–µ):
      ${servicesJson},

      –¢–∞–∫–∂–µ —É—á–∏—Ç—ã–≤–∞–π –æ—Ü–µ–Ω–∫—É –∫–æ–∂–∏ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é —Å–æ—Å—Ç–∞–≤–ª—è—é—â—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ —É—Å–ª—É–≥:
      –ö–æ–∂–∞: ${skinJson},
      –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ: ${anxietyJson}

      –í—ã–±–µ—Ä–∏ —Ç–æ–ª—å–∫–æ —Ç–µ —É—Å–ª—É–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—Ö–æ–¥—è—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –º–∞—Å—Å–∏–≤–∞, –≥–¥–µ –∫–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç:

      - id (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Ä–≤–∏—Å–∞)
      - clinic_id (—Å—Ç—Ä–æ–∫–∞ ‚Äî ID –∫–ª–∏–Ω–∏–∫–∏)
      - name (–Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏)
      - description (–æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏)
      - price (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ —Ç–µ–Ω–≥–µ)

      –°—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É–π —ç—Ç–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ –≤–Ω–µ JSON –º–∞—Å—Å–∏–≤–∞.`
          : `The user has the following diseases: ${userDiseases}.
      Here is the list of all available services (only choose from this list, do not invent new ones):
      ${servicesJson},

      Also take into account the user's skin condition and psychological aspects to select services more accurately:
      Skin: ${skinJson},
      Psychological data: ${anxietyJson}

      Select only those services that are suitable for the user. Return the result as a JSON array, where each object must include:

      - id (unique service identifier)
      - clinic_id (string ‚Äî clinic ID)
      - name (service name)

      Strictly follow this structure. Do not include anything outside the JSON array.`;

      const chatCompletion = await this.client.chat.completions.create({
        model: 'gpt-4.1',
        messages: [
          {
            role: 'system',
            content:
              lang === 'ru'
                ? '–¢—ã –¥–æ–∫—Ç–æ—Ä —Å –±–æ–ª—å—à–∏–º –æ–ø—ã—Ç–æ–º –∏ —Å—Ç–∞–∂–µ–º. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.'
                : 'You are a medical doctor with great experience. Respond strictly in JSON format.',
          },
          {
            role: 'user',
            content: prompt,
          },
        ],
        temperature: 0.2,
        max_tokens: 10000,
      });

      const aiContent = chatCompletion.choices[0]?.message?.content || '[]';

      let parsedIds: { id: number }[] = [];

      try {
        parsedIds = JSON.parse(aiContent);
      } catch (jsonError) {
        console.error('Failed to parse AI response as JSON:', aiContent);
        throw new HttpException('AI response was not a valid JSON array', 500);
      }

      const selectedIds = parsedIds.map((item) => item.id);

      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ —Å–µ—Ä–≤–∏—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–º ID
      const recommendedServices = services_full.filter((service) =>
        selectedIds.includes(service.id),
      );

      return recommendedServices;
    } catch (error) {
      console.error('AIService getRecommendationServices error:', error);
      throw new HttpException('Failed to get AI recommendations', 500);
    }
  }

  async explainDentalCheckResultRu(
    user: User,
    result: any,
  ): Promise<{
    diagnosis: string;
    explanation: string;
    recommendation: string;
  }> {
    try {
      const systemPrompt = `
–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥ —Å –±–æ–ª—å—à–∏–º –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º –æ–ø—ã—Ç–æ–º.
–ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç Roboflow –æ–±—ä—è—Å–Ω–∏, –∫–∞–∫–æ–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ, —á—Ç–æ –æ–Ω–æ –æ–∑–Ω–∞—á–∞–µ—Ç –∏ –∫–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω—É–∂–Ω–æ –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—å.
–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –Ω–æ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π Roboflow:

{
  "diagnosis": "OSMF ‚Äî –ø–æ–¥—Å–ª–∏–∑–∏—Å—Ç—ã–π —Ñ–∏–±—Ä–æ–∑ –ø–æ–ª–æ—Å—Ç–∏ —Ä—Ç–∞",
  "explanation": "OSMF ‚Äî —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ –ø–æ–ª–æ—Å—Ç–∏ —Ä—Ç–∞, —á–∞—Å—Ç–æ —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å –∂–µ–≤–∞–Ω–∏–µ–º —Ç–∞–±–∞–∫–∞ –∏–ª–∏ –¥—Ä—É–≥–∏–º–∏ —Ä–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª—è–º–∏. –ú–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –∂–∂–µ–Ω–∏–µ, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ–¥–≤–∏–∂–Ω–æ—Å—Ç–∏ —Ä—Ç–∞ –∏ –≤ —Ä–µ–¥–∫–∏—Ö —Å–ª—É—á–∞—è—Ö ‚Äî –ø–µ—Ä–µ—Ä–æ–∂–¥–µ–Ω–∏–µ –≤ —Ä–∞–∫.",
  "recommendation": "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—É –¥–ª—è —Ä–∞–Ω–Ω–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—Å–ª–æ–∂–Ω–µ–Ω–∏–π."
}
    `.trim();

      const userPrompt = `
–ü–∞—Ü–∏–µ–Ω—Ç: ${user.first_name} ${user.last_name}
–ü–æ–ª: ${user.gender}
–í–æ–∑—Ä–∞—Å—Ç: ${user.age ?? '–Ω–µ —É–∫–∞–∑–∞–Ω'}

–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ Roboflow:
${JSON.stringify(result.predictions, null, 2)}
    `.trim();

      const response = await this.client.chat.completions.create({
        model: 'gpt-4-turbo',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt },
        ],
        temperature: 0.2,
      });

      const message = response.choices[0]?.message?.content;
      if (!message) throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT');

      const parsed = JSON.parse(message);
      return parsed;
    } catch (error) {
      console.error('AIService explainDentalCheckResultRu error:', error);
      throw new HttpException(
        '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ–∑–∞ –æ—Ç AI',
        500,
      );
    }
  }

  async diagnoseFromAnalysisImage(userId: number, imageUrl: string) {
    console.log(
      `[diagnoseFromAnalysisImage] –ù–∞—á–∞–ª–æ. userId=${userId}, imageUrl=${imageUrl}`,
    );

    const prompt = `
–¢—ã –æ–ø—ã—Ç–Ω—ã–π –≤—Ä–∞—á-–¥–∏–∞–≥–Ω–æ—Å—Ç. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–æ—Ç–æ –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–æ–≤–∏ (–û–ê–ö, –±–∏–æ—Ö–∏–º–∏—è –∏–ª–∏ –¥—Ä—É–≥–æ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑).

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:
1. –û–ø—Ä–µ–¥–µ–ª–∏ –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
2. –£–∫–∞–∂–∏, –µ—Å—Ç—å –ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç –Ω–æ—Ä–º—ã (–±–µ–∑ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ–∫–∞–∑–∞—Ç–µ–ª—é).
3. –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–∏–∞–≥–Ω–æ–∑—ã –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
4. –î–∞–π –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: —á—Ç–æ –¥–µ–ª–∞—Ç—å, –∫ –∫–∞–∫–æ–º—É –≤—Ä–∞—á—É –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è, –∫–∞–∫–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã —Å–¥–∞—Ç—å.

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ JSON:

{
  "status": "–∑–¥–æ—Ä–æ–≤ / –≤–æ–∑–º–æ–∂–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è / —Ç—Ä–µ–≤–æ–∂–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏",
  "potential_diagnoses": [
    {
      "name": "–ù–∞–∑–≤–∞–Ω–∏–µ –¥–∏–∞–≥–Ω–æ–∑–∞",
      "reason": "–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ",
      "recommended_action": "–ß—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å"
    }
  ],
  "advice": "–û–±—â–∏–π —Å–æ–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
}
`.trim();

    try {
      const response = await this.client.chat.completions.create({
        model: 'gpt-4-turbo',
        messages: [
          {
            role: 'user',
            content: [
              { type: 'text', text: prompt },
              {
                type: 'image_url',
                image_url: { url: imageUrl },
              },
            ],
          },
        ],
        temperature: 0.2,
        max_tokens: 1000,
      });

      console.log('[diagnoseFromAnalysisImage] –û—Ç–≤–µ—Ç –æ—Ç GPT –ø–æ–ª—É—á–µ–Ω');

      const text = response.choices[0]?.message?.content;

      if (!text) {
        console.error('[diagnoseFromAnalysisImage] –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç GPT');
        throw new HttpException('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç GPT', 500);
      }

      let cleanedText = text.trim();

      if (cleanedText.startsWith('```json')) {
        cleanedText = cleanedText
          .replace(/^```json/, '')
          .replace(/```$/, '')
          .trim();
      }

      const jsonMatch = cleanedText.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        console.error(
          '[diagnoseFromAnalysisImage] JSON-–æ–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—Å—Ç–µ',
        );
        throw new HttpException('JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ', 500);
      }

      let result;
      try {
        result = JSON.parse(jsonMatch[0]);
      } catch (err) {
        console.error('[diagnoseFromAnalysisImage] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', err);
        throw new HttpException('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON', 500);
      }

      console.log(
        '[diagnoseFromAnalysisImage] JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î...',
      );

      const saved = await this.prisma.medicalAnalysis.create({
        data: {
          user_id: userId,
          image_url: imageUrl,
          result,
        },
      });

      console.log(
        '[diagnoseFromAnalysisImage] –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å ID:',
        saved.id,
      );

      return saved;
    } catch (err) {
      console.error(
        '[diagnoseFromAnalysisImage] –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:',
        err,
      );
      throw new HttpException('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', 500);
    }
  }

  async generateRiskProfile(userId: number): Promise<void> {
    const user = await this.prisma.user.findUnique({
      where: { id: userId },
      include: {
        skinChecks: { orderBy: { check_datetime: 'desc' }, take: 1 },
        anxietyChecks: { orderBy: { created_at: 'desc' }, take: 1 },
        medicalAnalyses: { orderBy: { created_at: 'desc' }, take: 1 },
      },
    });

    if (!user) throw new Error('User not found');

    const prompt = `
–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –≤—Ä–∞—á. –û—Ü–µ–Ω–∏ —É—Ä–æ–≤–µ–Ω—å –æ–±—â–µ–≥–æ —Ä–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
–í–µ—Ä–Ω–∏ JSON —Å—Ç—Ä–æ–≥–æ –ø–æ —à–∞–±–ª–æ–Ω—É:

{
  "risk_score": 0.76,
  "risk_factors": [
    { "source": "SkinCheck", "label": "–ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ –º–µ–ª–∞–Ω–æ–º—É", "weight": 0.8 },
    { "source": "Anxiety", "label": "–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏", "weight": 0.6 }
  ]
}

–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
–í–æ–∑—Ä–∞—Å—Ç: ${user.age}
–†–æ—Å—Ç: ${user.height}
–í–µ—Å: ${user.weight}
–ë–æ–ª–µ–∑–Ω–∏: ${user.diseases.join(', ') || '–Ω–µ—Ç'}
SkinCheck: ${user.skinChecks?.[0] ? user.skinChecks[0].risk_description : '–Ω–µ—Ç'}
Anxiety: ${user.anxietyChecks?.[0] ? user.anxietyChecks[0].summary : '–Ω–µ—Ç'}
–ê–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏: ${JSON.stringify(user.medicalAnalyses?.[0]?.result || {})}
`;

    const response = await this.client.chat.completions.create({
      model: 'gpt-4',
      messages: [
        {
          role: 'system',
          content: '–¢—ã –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –≤ JSON.',
        },
        { role: 'user', content: prompt },
      ],
      temperature: 0.2,
    });

    const content = response.choices[0]?.message?.content;
    if (!content) throw new Error('Empty AI response');

    const parsed = JSON.parse(content);

    await this.prisma.riskProfile.upsert({
      where: { user_id: userId },
      update: {
        risk_score: parsed.risk_score,
        risk_factors: parsed.risk_factors,
      },
      create: {
        user_id: userId,
        risk_score: parsed.risk_score,
        risk_factors: parsed.risk_factors,
      },
    });

    console.log(`‚úÖ Risk profile updated for user ${userId}`);
  }
}
